 람다식 (Lambda Expressions)
: 함수형 프로그래밍을 위해 사용
: 자바 8부터 사용
: 객체지향 언어보다는 함수지향 언어에 가까움
: 익명 함수를 생성하기 위한 식

ex) Runnable runnable = new Runnable(){
   public void run(){
      ....
   }
}

Runnable runnable = (매개변수) -> {실행코드}; // 람다식

why?
- 자바 코드 간결
- 보기에 편함

- 람다식 기본 문법
(매개변수, ...) -> {실행문; ...}
* 매개변수는 중괄호 {} 블록을 실행하기 위해 필요한 값을 제공하는 역할
* 매개변수가 하나만 있다면 괄호 () 생략 가능함
(매개변수가 없다면 빈 괄호 () 무조건 작성 필요!)
* 하나의 실행문만 있으면 중괄호 {} 생략할 수 있음

1) (int a) -> {sysout(a);}
2) 매개변수 타입은 자동으로 인식될 수 있음
   (a) -> {sysout(a);}
a -> sysout(a); (o)
a -> {sysout(a);} (o)
() -> {sysout("Hello");} (o)

3) return값 지정 가능
   (x, y) -> {return x + y;}
   중괄호 {}에 return만 있으면 return 생략 가능
   (x, y) -> {x + y;}


(x, y) -> {return x + y;} - 1
(x, y) -> return x + y; - 2
(x, y) -> {sysout(x); return x + y} - 3
(x, y) -> x + y; - 4

가능한 문장: 2, 4
불가능한 문장: 1, 3 => 수정해주세요!


- 프로그래밍 패러다임
   ● 명령형 프로그래밍: 무엇 (WHAT)할 것인지 나타내기보다
   어떻게 (HOW)할 것을 설명하는 방식

      - 객체지향 프로그래밍: 객체의 집합으로 프로그램의 상호작용 표현
      (JAVA, C++, C#)
      - 절차지향 프로그래밍: 순차적인 처리 과정을 포함하는 방식
      (C, C++)

      * 어떻게 할 것인지 설명하는 부분이 많음
      * 코드의 유지보수가 힘듦
      * 함수 이름을 통해 무엇을 할 것인지 알려줌

   ● 선언형 프로그래밍: 어떻게 (HOW)할 것인지 나타내기보다
   무엇 (WHAT)을 할 것인지 설명하는 방식
      - 함수형 프로그래밍: 함수를 조합하여 소프트웨어를 만드는 방식
      * 거의 모든 것을 함수로 나누어 문제를 해결하는 기법
      * 함수를 나누어 작성하여 가독성을 높이고 유지보수를 용이하게 해줌


      